buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath 'org.owasp:dependency-check-gradle:3.1.2'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.12.0'
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.7.1'
}

apply plugin: 'io.codearte.nexus-staging'

scmVersion {
    tag {
        prefix = 'javers'
    }
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'propdeps'
    apply plugin: 'org.owasp.dependencycheck'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    project.group = 'org.javers'
    project.version = scmVersion.version

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.11'
        testCompile "org.spockframework:spock-core:$spockVersion"
        testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
        testCompile 'org.apache.commons:commons-lang3:3.8.1'
        testCompile 'ch.qos.logback:logback-classic:1.1.3'
        testCompile 'cglib:cglib-nodep:3.2.0'
        testCompile 'org.objenesis:objenesis:2.1'
        testCompile 'org.easytesting:fest-assert-core:2.0M10'
    }

    javadoc {
        options.noTimestamp()
    }

    test {
        testLogging {
            exceptionFormat = 'full'
            tasks.test.testLogging {
                events 'failed', 'passed'
                showStandardStreams = false
            }
            events 'failed'
        }
    }

    task example(dependsOn: 'cleanTest') {
        doLast {
            tasks.test.testLogging {
                events 'failed', 'passed'
                showStandardStreams = true
            }
            tasks.test.execute()
        }
    }

    //disable javadoc doclint for Java8
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    //-- begin uploadArchives spell --
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        archives javadocJar, sourcesJar
    }
    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
    // Build, sign, and upload
    uploadArchives {
        repositories {
            mavenDeployer {

                // Sign POM
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                // Destination
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: project.findProperty('nexusUsername') ?: 'secured', 
                                   password: project.findProperty('nexusPassword') ?: 'secured')
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: project.findProperty('nexusUsername') ?: 'secured',
                                   password: project.findProperty('nexusPassword') ?: 'secured')
                }

                // Add required metadata to POM
                pom.project {
                    name = 'JaVers Library'
                    packaging 'jar'
                    description = 'JaVers - object auditing and diff framework for Java'
                    url = 'http://javers.org'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'javers'
                            name = 'JaVers Core Team'
                            email = 'javers@javers.org'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/javers/javers.git'
                        developerConnection = 'scm:git:https://github.com/javers/javers.git'
                        url = 'https://github.com/javers/javers'
                    }
                }
            }
        }
    }
    //-- eof uploadArchives spell --

    test {
        testLogging.exceptionFormat = 'full'
        testLogging.showStackTraces = true
    }
}

//io.codearte.gradle
nexusStaging {
    packageGroup = 'org.javers'
    numberOfRetries = 20
    delayBetweenRetriesInMillis = 3000
}

/*
nexusPublishing {
    packageGroup = rootProject.nexusStaging.packageGroup
    stagingProfileId = rootProject.nexusStaging.stagingProfileId
    username = rootProject.nexusStaging.username
    password = rootProject.nexusStaging.password
}*/

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.3'
}